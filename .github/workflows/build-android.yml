name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-11-jdk wget
        sudo apt-get install -y autoconf automake libtool pkg-config cmake
        sudo apt-get install -y build-essential ccache libffi-dev libssl-dev
        sudo apt-get install -y libpng-dev libjpeg-dev zlib1g-dev
        sudo apt-get install -y python3-dev python3-setuptools
        sudo apt-get install -y libltdl-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython flask

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.2
        ndk-version: 25.2.9519653

    - name: Set up Java 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install additional build tools and accept licenses
      env:
        SKIP_JDK_VERSION_CHECK: true
      run: |
        # Use Java 17 for SDK manager (required) but skip version check
        export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Accept all licenses first
        yes | sdkmanager --licenses
        
        # Install additional build-tools versions that buildozer might need
        sdkmanager "build-tools;33.0.2" "platforms;android-33"
        
        # Accept licenses again after installation
        yes | sdkmanager --licenses
        
        # List installed packages for verification
        sdkmanager --list_installed

    - name: Pre-setup buildozer directories
      run: |
        # Create buildozer cache directories and completely populate them
        mkdir -p .buildozer/android/platform
        
        # Copy (don't link) SDK to buildozer location to avoid path issues
        cp -r $ANDROID_SDK_ROOT .buildozer/android/platform/android-sdk
        cp -r $ANDROID_NDK_HOME .buildozer/android/platform/android-ndk-r25b
        
        # Create the tools directory that buildozer expects with working SDK tools
        mkdir -p .buildozer/android/platform/android-sdk/tools/bin
        
        # Create a wrapper sdkmanager that uses the working cmdline-tools version
        echo '#!/bin/bash' > .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        echo '# Wrapper to use the working cmdline-tools sdkmanager with Java 17' >> .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        echo 'export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64' >> .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        echo 'export PATH=$JAVA_HOME/bin:$PATH' >> .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        echo 'export SKIP_JDK_VERSION_CHECK=true' >> .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        echo "exec $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager \"\$@\"" >> .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        chmod +x .buildozer/android/platform/android-sdk/tools/bin/sdkmanager
        
        # Create a wrapper avdmanager that uses the working cmdline-tools version with Java 17
        echo '#!/bin/bash' > .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        echo '# Wrapper to use the working cmdline-tools avdmanager with Java 17' >> .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        echo 'export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64' >> .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        echo 'export PATH=$JAVA_HOME/bin:$PATH' >> .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        echo 'export SKIP_JDK_VERSION_CHECK=true' >> .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        echo "exec $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager \"\$@\"" >> .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        chmod +x .buildozer/android/platform/android-sdk/tools/bin/avdmanager
        
        # CRITICAL: Create wrapper avdmanager in the exact path that python-for-android calls
        # The error shows it's calling: /cmdline-tools/latest/bin/avdmanager
        mkdir -p .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin
        echo '#!/bin/bash' > .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        echo '# P4A avdmanager wrapper with Java 17' >> .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        echo 'export JAVA_HOME=/usr/lib/jvm/temurin-17-jdk-amd64' >> .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        echo 'export PATH=$JAVA_HOME/bin:$PATH' >> .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        echo 'export SKIP_JDK_VERSION_CHECK=true' >> .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        echo "exec $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/avdmanager \"\$@\"" >> .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        chmod +x .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/avdmanager
        
        # Create apache-ant directory (buildozer expects this)
        mkdir -p .buildozer/android/platform/apache-ant-1.9.4/bin
        
        # Create a dummy ant script to satisfy buildozer
        echo '#!/bin/bash' > .buildozer/android/platform/apache-ant-1.9.4/bin/ant
        echo '# Dummy ant script - use system ant instead' >> .buildozer/android/platform/apache-ant-1.9.4/bin/ant
        echo 'exec ant "$@"' >> .buildozer/android/platform/apache-ant-1.9.4/bin/ant
        chmod +x .buildozer/android/platform/apache-ant-1.9.4/bin/ant
        
        # Show what we've created
        echo "Buildozer directory structure:"
        ls -la .buildozer/android/platform/
        echo "Android SDK build-tools:"
        ls -la .buildozer/android/platform/android-sdk/build-tools/
        echo "Wrapper scripts created:"
        ls -la .buildozer/android/platform/android-sdk/cmdline-tools/latest/bin/

    - name: Build APK with Buildozer
      env:
        SKIP_JDK_VERSION_CHECK: true
      run: |
        # Copy mobile game as main.py
        cp supertuxkart_mobile.py main.py
        
        # Set Java 11 environment (buildozer and python-for-android work better with Java 11)
        export JAVA_HOME=/usr/lib/jvm/temurin-11-jdk-amd64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # Update buildozer.spec with buildozer cache paths (relative to project)
        sed -i "s|android.ndk_path = .*|android.ndk_path = .buildozer/android/platform/android-ndk-r25b|g" buildozer.spec
        sed -i "s|android.sdk_path = .*|android.sdk_path = .buildozer/android/platform/android-sdk|g" buildozer.spec
        sed -i "s|android.ant_path = .*|android.ant_path = .buildozer/android/platform/apache-ant-1.9.4|g" buildozer.spec
        
        # Set environment variables that buildozer checks
        export ANDROIDAPI="33"
        export ANDROIDMINAPI="23"
        export ANDROIDSDKROOT="$ANDROID_SDK_ROOT"
        export ANDROIDNDKROOT="$ANDROID_NDK_HOME"
        
        # Show environment for debugging
        echo "Build environment:"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Java version: $(java -version 2>&1 | head -1)"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"  
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "ANDROIDSDKROOT: $ANDROIDSDKROOT"
        
        # Show updated buildozer.spec paths
        echo "Buildozer SDK paths:"
        grep -E "(ndk_path|sdk_path|ant_path)" buildozer.spec
        
        # Build debug APK with maximum logging and error capture
        buildozer --verbose android debug 2>&1 | tee buildozer_full.log || {
          echo "=== BUILDOZER FAILED - SHOWING LAST 100 LINES OF LOG ==="
          tail -100 buildozer_full.log
          echo "=== END OF BUILDOZER LOG ==="
          exit 1
        }
        
        # Check if APK was actually created and show build output structure
        echo "=== APK BUILD VERIFICATION ==="
        echo "Current directory contents:"
        ls -la
        echo "Bin directory contents:"
        ls -la bin/ || echo "bin/ directory does not exist"
        echo "Buildozer directory structure:"
        find .buildozer -name "*.apk" -type f || echo "No APK files found in .buildozer"
        echo "All APK files in project:"
        find . -name "*.apk" -type f || echo "No APK files found anywhere"
        echo "Webview bootstrap specific locations:"
        find .buildozer -name "*supertuxkartmobile*" -type f || echo "No supertuxkartmobile files found"
        find .buildozer -path "*webview*" -name "*.apk" -type f || echo "No webview APK files found"
        find .buildozer -path "*dist*" -type f -name "*.apk" -o -name "*.aab" || echo "No dist APK/AAB files found"
        echo "Complete buildozer build output structure:"
        find .buildozer/android/platform/build-* -type f -name "*.apk" -o -name "*.aab" || echo "No APK/AAB files in build output"
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: supertuxkart-mobile-apk
        path: |
          bin/*.apk
          .buildozer/android/platform/build-**/dist/**/*.apk
          .buildozer/android/platform/build-**/dists/**/*.apk
          .buildozer/**/bin/*.apk
          .buildozer/**/*supertuxkartmobile*.apk
          **/*.apk
          **/*.aab
        if-no-files-found: warn
        
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: SuperTuxKart Mobile v1.0.${{ github.run_number }}
        files: |
          bin/*.apk
          .buildozer/android/platform/build-**/dist/**/*.apk
          .buildozer/android/platform/build-**/dists/**/*.apk
          .buildozer/**/bin/*.apk
          .buildozer/**/*supertuxkartmobile*.apk
        body: |
          SuperTuxKart Mobile - Android APK
          
          🏎️ **Features:**
          - 3-phase gameplay: Speed Circuit → Arena Battle → Final Showdown
          - Touch controls optimized for mobile
          - 6 powerup types with authentic physics
          - 5-8 minute gaming sessions perfect for ads
          
          📱 **Installation:**
          1. Download APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install and enjoy!
          
          **Build Info:**
          - GitHub Actions Build #${{ github.run_number }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false
        fail_on_unmatched_files: false