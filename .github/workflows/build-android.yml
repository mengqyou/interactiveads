name: Build Android APK

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git zip unzip openjdk-11-jdk wget
        sudo apt-get install -y autoconf automake libtool pkg-config cmake
        sudo apt-get install -y build-essential ccache libffi-dev libssl-dev
        sudo apt-get install -y libpng-dev libjpeg-dev zlib1g-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install buildozer cython kivy

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 30
        build-tools: 30.0.3
        ndk-version: 25.2.9519653

    - name: Install additional build tools and accept licenses
      run: |
        # Accept all licenses first
        yes | sdkmanager --licenses
        
        # Install additional build-tools versions that buildozer might need
        sdkmanager "build-tools;36.0.0" "build-tools;33.0.2" "build-tools;34.0.0"
        
        # Accept licenses again after installation
        yes | sdkmanager --licenses
        
        # List installed packages for verification
        sdkmanager --list_installed

    - name: Pre-setup buildozer directories
      run: |
        # Create buildozer cache directories and link to pre-installed SDK
        mkdir -p .buildozer/android/platform
        
        # Create symbolic links to prevent buildozer from downloading SDK
        ln -sf $ANDROID_SDK_ROOT .buildozer/android/platform/android-sdk
        ln -sf $ANDROID_NDK_HOME .buildozer/android/platform/android-ndk-r25b
        
        # Create apache-ant link (buildozer expects this)
        mkdir -p $ANDROID_SDK_ROOT/apache-ant
        ln -sf $ANDROID_SDK_ROOT/apache-ant .buildozer/android/platform/apache-ant-1.9.4
        
        # Show what we've linked
        echo "Buildozer directory structure:"
        ls -la .buildozer/android/platform/
        echo "Android SDK build-tools:"
        ls -la $ANDROID_SDK_ROOT/build-tools/

    - name: Build APK with Buildozer
      run: |
        # Copy mobile game as main.py
        cp supertuxkart_mobile.py main.py
        
        # Update buildozer.spec with actual SDK paths
        sed -i "s|android.ndk_path = .*|android.ndk_path = $ANDROID_NDK_HOME|g" buildozer.spec
        sed -i "s|android.sdk_path = .*|android.sdk_path = $ANDROID_SDK_ROOT|g" buildozer.spec
        sed -i "s|android.ant_path = .*|android.ant_path = $ANDROID_SDK_ROOT/apache-ant|g" buildozer.spec
        
        # Set environment variables that buildozer checks
        export ANDROIDAPI="30"
        export ANDROIDMINAPI="21"
        export ANDROIDNDKVER="25b"
        export ANDROIDSDKROOT="$ANDROID_SDK_ROOT"
        export ANDROIDNDKROOT="$ANDROID_NDK_HOME"
        
        # Show environment for debugging
        echo "Build environment:"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"  
        echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"
        echo "ANDROIDSDKROOT: $ANDROIDSDKROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        
        # Show updated buildozer.spec paths
        echo "Buildozer SDK paths:"
        grep -E "(ndk_path|sdk_path|ant_path)" buildozer.spec
        
        # Build debug APK with forced use of existing SDK
        buildozer android debug
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: supertuxkart-mobile-apk
        path: bin/*.apk
        
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v1.0.${{ github.run_number }}
        name: SuperTuxKart Mobile v1.0.${{ github.run_number }}
        files: bin/*.apk
        body: |
          SuperTuxKart Mobile - Android APK
          
          üèéÔ∏è **Features:**
          - 3-phase gameplay: Speed Circuit ‚Üí Arena Battle ‚Üí Final Showdown
          - Touch controls optimized for mobile
          - 6 powerup types with authentic physics
          - 5-8 minute gaming sessions perfect for ads
          
          üì± **Installation:**
          1. Download APK file
          2. Enable "Install from unknown sources" in Android settings
          3. Install and enjoy!
        draft: false
        prerelease: false